package dash.asyntask;

import android.content.Context;
import android.os.AsyncTask;
import android.widget.Toast;
import dash.Bean.SegmentBean;
import dash.network.ExchangeData;
import dash.network.ExchangeDataState;
import dash.network.NetworkConnection;

import java.io.File;
import java.io.IOException;

public class UploadSegmentAsynTask extends AsyncTask<Void, String, Void> {
    private static int currentSessionId = -1;
    private static int currentIndex = 1;
    private String segmentPath;
    private SegmentBean segmentBean;
    private Context context;
    private int segmentId;
    private int isEnd;

    public UploadSegmentAsynTask(String segmentPath, Context context, boolean isEnd) {
        this.segmentPath = segmentPath;
        this.context = context;
        this.segmentId = getCurrentIndex();
        this.isEnd = isEnd ? 1 : 0;
    }

    private int getCurrentIndex() {
        return currentIndex++;
    }

    @Override
    protected Void doInBackground(Void... params) {
        try {
            segmentBean = new SegmentBean(segmentPath);
            synchronized (UploadSegmentAsynTask.class) {
                if (currentSessionId == -1) {
                    ExchangeData exchangeData =
                            new NetworkConnection().
                                    makePost(NetworkConnection.SEGMENT_UPLOAD_URL)
                                    .addExchangeData(
                                            new ExchangeData()
                                                    .addExchangeDataState(ExchangeDataState.REQUEST_UPLOAD_SESSION_ID))
                                    .jsonResponse();
                    if (exchangeData.getExchangeDataState() == ExchangeDataState.RESPONSE_UPLOAD_SESSION_ID.mappingInt()) {
                        currentSessionId = exchangeData.getSessionId();
                    } else {
                        publishProgress("Network error");
                        return null;
                    }
                }
                ExchangeData exchangeData = new NetworkConnection().makePost(NetworkConnection.SEGMENT_UPLOAD_URL)
                        .addFileBody(new File(segmentPath)).addExchangeData(
                                new ExchangeData()
                                        .addExchangeDataState(ExchangeDataState.REQUEST_TO_UPLOAD)
                                        .addDuration(segmentBean.getDuration())
                                        .addSegmentId(segmentId)
                                        .addSessionId(currentSessionId)
                                        .addTimeScale(segmentBean.getTimeScale())
                                        .addLengthInSecond(segmentBean.getLengthInSecond())
                                        .addIsEnd(isEnd)).jsonResponse();
                if (exchangeData.getExchangeDataState() != ExchangeDataState.RESPONSE_UPLOAD_SUCCESS.mappingInt()) {
                    publishProgress("Network error");
                }
                if (isEnd==1) {
                    currentSessionId = -1;
                    currentIndex = 1;
                }
            }

            return null;
        } catch (IOException e) {
            publishProgress("Network unreachable");
            return null;
        } finally {
            File tempFile = new File(segmentPath);
            //noinspection StatementWithEmptyBody
            while (!tempFile.delete()) {
            }
        }
    }

    @Override
    protected void onProgressUpdate(String... values) {
        Toast.makeText(context, values[0], Toast.LENGTH_LONG).show();
    }

    public synchronized static void reset() {
        currentSessionId = -1;
        currentIndex = 1;
    }
}
